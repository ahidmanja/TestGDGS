
<br />
<br />

@(Html.Kendo().Grid<IdentitySample.Models.FinalTempViewModel>()
    .Name("FTemp")
    .Columns(columns =>
    {
        columns.Bound(p => p.temptype).Title("Template Type").Width(200);
        columns.Bound(p => p.comm).Title("Entity").Width(200);
        columns.Bound(p => p.doctype).Title("Document Type").Width(200);
        columns.Bound(p => p.cat).Title("Category").Width(200);
        columns.Bound(p => p.Name).Title("Template Name").Width(200);
        columns.Bound(p => p.Symbole).Title("Template Symbole").Width(200);
        columns.Bound(p => p.Title).Title("Template Title").Width(200);
        columns.Bound(p => p.Count).Title("Count").Width(200);
        columns.Bound(p => p.Reg).Title("REg").Width(200);

        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);
    })
    .ToolBar(toolbar => { toolbar.Create(); toolbar.Excel(); })
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Editor").Window(w => w.Width(700).Title("Template Details")))
    .Filterable()
    .Groupable()
    .ColumnMenu()
         .Resizable(resize => resize.Columns(true))
     .Reorderable(reorder => reorder.Columns(true))
    .Pageable()
        .Excel(excel => excel
        .FileName("Templates.xlsx")
        .AllPages(true)
        .Filterable(true)
        .ProxyURL(Url.Action("Excel_Export_Save", "Helper"))
            )
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:800px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Group(a => a.Add(x => x.comm))
        .PageSize(20)
            .Events(events =>
            {
                //events.Error("errorHandler");
                events.RequestEnd("onchange");
            })
        .Model(model =>
        {
            model.Id(p => p.ID);
            model.Field(p => p.Reg).DefaultValue("x");
            model.Field(p => p.Count).DefaultValue(0);
        })
        .Create(update => update.Action("Create", "FinalTemp"))
        .Read(read => read.Action("Read", "FinalTemp"))
        .Update(update => update.Action("Update", "FinalTemp"))
       .Destroy(update => update.Action("Destroy", "FinalTemp"))
    )
)

<script type="text/javascript">
    //function oncascade() {
    //    $("#Cat_ID").data("kendoDropDownList").dataSource.read();
    //}
    
    //function doctselect() {
    //    $("#Cat_ID").data("kendoDropDownList").dataSource.read();
    //}

    //function onSuccess(e) {
    //    var Newname = e.response.name.val();
    //    alert(Newname);
    //}
    function FilterTempT() {
        return {
            t: $("#temptype_ID").val()
        };
    }
    function filtercomm() {
        return {
            comm: $("#com_ID").val()
        };
    }
    function filterdoct1() {
        return {
            tt: $("#Doctype_ID").val()
           // tt:8
        };
    }
    function onchange(e) {
        if (e.type == "update") {
            $("#FTemp").data("kendoGrid").dataSource.read();
        }
        if (e.type == "create") {
            $("#FTemp").data("kendoGrid").dataSource.read();
        }
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    
    function onRemove(e) {
        e.data = {
            fileDescription: $("#Name").val()
        };
    }
    function onUpload(e) {
        e.data = {
            fileDescription: $("#Name").val()
        };
    }
</script>

